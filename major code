import tensorflow as tf
from tensorflow import keras
from tensorflow.python.keras import models, layers
import matplotlib.pyplot as plt
import numpy as np
import math
from google.colab import drive
#drive.mount('/content/drive')

IMAGE_SIZE = 256
BATCH_SIZE = 25
CHANNELS = 3
EPOCHS = 50
dataset = tf.keras.preprocessing.image_dataset_from_directory(
    "/content/drive/MyDrive/Program Dataset",
    shuffle = True,
    image_size = (IMAGE_SIZE, IMAGE_SIZE),
    batch_size = BATCH_SIZE
)
class_names = dataset.class_names
print(class_names)
N_CLASSES = len(class_names)

plt.figure(figsize=(10,10))
for image_batch, label_batch in dataset.take(1):
  for i in range(25):
    ax = plt.subplot(5, 5, i+1)
    plt.imshow(image_batch[i].numpy().astype("uint8"))
    plt.title(class_names[label_batch[i]])
    plt.axis("off")
print("Total number of image batches:", len(dataset)) #total no of picture batches

train_size = 0.8
train_size = int(math.ceil(len(dataset)*train_size))
train_ds = dataset.take(train_size) #80% of dataset
#print(len(train_ds))
test_ds= dataset.skip(train_size) #starting from remaining 81st%
val_size = 0.1
val_size = int(math.ceil(len(dataset)*val_size))
val_ds = test_ds.take(val_size)
#print(len(val_ds))
test_ds = test_ds.skip(val_size)
#print(len(test_ds))

print("Training Image batches:",len(train_ds))
print("Validation Image batches:",len(val_ds))
print("Testing Image batches:",len(test_ds))

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
val_ds = val_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)
test_ds = test_ds.cache().shuffle(1000).prefetch(buffer_size=tf.data.AUTOTUNE)

input_shape = (BATCH_SIZE, IMAGE_SIZE, IMAGE_SIZE, CHANNELS)
n_classes = N_CLASSES

input_shape = (BATCH_SIZE, IMAGE_SIZE, IMAGE_SIZE, CHANNELS)
n_classes = N_CLASSES
model = keras.Sequential([
    resize_and_rescale,
    data_augmentation,
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape = input_shape),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(32, kernel_size = (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(16, kernel_size = (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Conv2D(8, kernel_size = (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D((2,2)),
    #tf.keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),
    #tf.keras.layers.MaxPooling2D((2,2)),
    #tf.keras.layers.Conv2D(64, kernel_size = (3,3), activation = 'relu'),
    #tf.keras.layers.MaxPooling2D((2,2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(4, activation='relu'),
    tf.keras.layers.Dense(n_classes, activation='softmax'),
])
model.build(input_shape = input_shape)

model.summary()

model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(
      from_logits=False,
      ignore_class=None,
      reduction='sum_over_batch_size',
      name='sparse_categorical_crossentropy'
    ),
    metrics=['accuracy']
)
history = model.fit(
    train_ds,
    #epochs = EPOCHS,
    epochs = 50,
    batch_size = BATCH_SIZE,
    verbose = 1,
    validation_data=val_ds
)

scores = model.evaluate(test_ds)
model.summary()

history.history.keys()
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

plt.figure(figsize=(8,8))
plt.subplot(1, 2, 1)
plt.plot(range(EPOCHS), acc, label = "Training Accuracy")
plt.plot(range(EPOCHS), val_acc, label = "Validation Accuracy")
plt.legend(loc = "lower right")
plt.title("Training and Validation Accuracy")

plt.subplot(1,2,2)
plt.plot(range(EPOCHS), loss, label = "Training Loss")
plt.plot(range(EPOCHS), val_loss, label = "Validation Loss")
plt.legend(loc = "upper right")
plt.title("Training and Validation Loss")
plt.show()

def predict(model, img):
  img_array = tf.keras.preprocessing.image.img_to_array(images[i].numpy())
  img_array = tf.expand_dims(img_array, 0)
  predictions = model.predict(img_array)
  predicted_class = class_names[np.argmax(predictions[0])]
  confidence = round(100 * (np.max(predictions[0])), 2)
  return predicted_class, confidence

plt.figure(figsize=(11,11))
for images, labels in test_ds.take(1):
  for i in range (12):
    ax = plt.subplot(3,4, i +1)
    plt.imshow(images[i].numpy().astype("uint8"))
    predicted_class, confidence = predict(model, images[i].numpy())
    actual_class = class_names[labels[i]]
    plt.title(f"Actual: {actual_class},\n Predicted: {predicted_class},\n Confidence: {confidence}%")
    plt.axis("off")

model_version = 3
model.save(f"/content/drive/MyDrive/Models/{model_version}.keras")
print("Saved model.")

model_version = 3
model = tf.keras.models.load_model(f"/content/drive/MyDrive/Models/{model_version}.keras")

print("Model loaded.")
model.summary()
loss, acc = new_model.evaluate(test_ds, verbose=2)
print('Restored model, accuracy: {:5.2f}%'.format(100 * acc))
print(new_model.predict(test_ds).shape)
